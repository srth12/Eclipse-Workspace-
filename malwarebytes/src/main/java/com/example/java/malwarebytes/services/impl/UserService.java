package com.example.java.malwarebytes.services.impl;

import com.example.java.malwarebytes.dao.UserRequestDAO;
import com.example.java.malwarebytes.repository.UserRequestRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import java.util.ArrayList;
import java.util.List;

/**
 * User CRUD service
 */
@Component
public class UserService {

    @Autowired
    private UserRequestRepository userRequestRepository;

    public void saveOrUpdate(UserRequestDAO userRequestDAO) {
        userRequestRepository.save(userRequestDAO);
    }

    public List<UserRequestDAO> getAllUsers() {
        List<UserRequestDAO> allUsers = new ArrayList<UserRequestDAO>();
        userRequestRepository.findAll().forEach(allUsers::add);
        return allUsers;
    }

    //TODO Use options to return instead of list

    /**
     * The method will return the given user's recent previous request based on the
     * timestamp
     * @param userId username of the user
     * @param timestamp timestamp in epoch to fetch the request prior to it
     * @return the list containing previous request
     */
    public List<UserRequestDAO> getPreviousRequest(String userId, long timestamp) {
        List<UserRequestDAO> previousRequests = userRequestRepository.findPreviousRequests(userId, timestamp);

        return previousRequests;
    }

    /**
     * The method will return the given user's recent subsequent request based on the
     * timestamp
     * @param userId username of the user
     * @param timestamp timestamp in epoch to fetch the request subsequent to it
     * @return returns the subsequent list
     */
    // TODO use optional instead of list
    public List<UserRequestDAO> getNextRequest(String userId, long timestamp) {
        List<UserRequestDAO> nextRequests = userRequestRepository.findNextRequests(userId, timestamp);
        return nextRequests;
    }

}
