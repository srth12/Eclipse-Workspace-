package com.example.java.malwarebytes.services.impl;

import com.example.java.malwarebytes.dto.GeoLocation;
import com.example.java.malwarebytes.services.IPGeoLocationService;
import com.maxmind.db.CHMCache;
import com.maxmind.geoip2.DatabaseReader;
import com.maxmind.geoip2.exception.GeoIp2Exception;
import com.maxmind.geoip2.model.*;
import com.maxmind.geoip2.record.Location;
import org.springframework.stereotype.Service;

import java.io.File;
import java.io.IOException;
import java.net.InetAddress;
import java.net.URISyntaxException;
import java.net.URL;
import java.net.UnknownHostException;

@Service
public class IPGeoLocationServiceHaversine implements IPGeoLocationService {

    private DatabaseReader reader;

    /**
     * Given ip address, it will return the Geo Location of that ip
     * @param ipAddressStr
     * @return
     * @throws UnknownHostException
     */
    public GeoLocation getGeoLocation(String ipAddressStr) throws IOException, GeoIp2Exception, URISyntaxException {

        InetAddress ipAddress = InetAddress.getByName(ipAddressStr);
        CityResponse response = this.getDatabaseReader().city(ipAddress);
        Location location = response.getLocation();
        var lat = location.getLatitude();
        var lon = location.getLongitude();
        var radius = location.getAccuracyRadius();

        return new GeoLocation(lat, lon, radius);
    }

    public DatabaseReader getDatabaseReader() throws IOException, URISyntaxException {

        File database = null;
        if (reader != null)
            return this.reader;

        // A File object pointing to your GeoIP2 or GeoLite2 database
        //TODO should read from config file instead of hard copy
        URL resource = getClass().getClassLoader().getResource("static/GeoLite2-City.mmdb");
        if (resource == null) {
            throw new IllegalArgumentException("file not found!");
        } else {

            database = new File(resource.toURI());
        }
        // This creates the DatabaseReader object. To improve performance, reuse
        // the object across lookups. The object is thread-safe.
        //Using this cache, lookup performance is significantly improved at the cost of a small (~2MB) memory overhead.
        this.reader = new DatabaseReader.Builder(database).withCache(new CHMCache()).build();
        return reader;
    }
}
